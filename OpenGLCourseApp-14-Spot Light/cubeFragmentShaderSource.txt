#version 330 core
out vec4 FragColor;

struct Material {  
    float shininess;	//specular light shininess
	
	//attenuation values
	float kConstant;
	float kLinear;
	float kQuadratic;
}; 

uniform sampler2D diffuseT;
uniform sampler2D specularT;  

struct Light {
    vec3 position;
	vec3 direction;
	float cutOff;
	float cutOffOuter;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    // ambient
    vec3 ambient = light.ambient * texture(diffuseT, TexCoords).rgb;

	vec3 diffuse = vec3(0.0);
	vec3 specular = vec3(0.0);	
	
	//fragment normal
	vec3 norm = normalize(Normal);
	//light direction from fragment towards light
	vec3 lightDir = normalize(light.position - FragPos);
  	
	// diffuse 
	float diff = max(dot(norm, lightDir), 0.0);
	diffuse = light.diffuse * diff * texture(diffuseT, TexCoords).rgb;  
	
	// specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	specular = light.specular * spec * texture(specularT, TexCoords).rgb;  
		
	//soft spotlight
		  //degree between spot light and lightDir
	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon =	 light.cutOff - light.cutOffOuter;
	float intensity = clamp((theta - light.cutOffOuter) / epsilon, 0.0, 1.0);
	diffuse *= intensity;
	specular *= intensity;
 
	float distance = length(light.position - FragPos);
	float attenuation = 1 / (material.kConstant + material.kLinear * distance + material.kQuadratic * distance * distance);
	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;
	
	vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 