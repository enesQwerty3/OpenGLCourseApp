#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 lightPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 viewPos;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
	// direction from fragment towards the light, FragPos -> lightPos = lightPos - FragPos
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
	//specular
	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - FragPos);
	float spec = pow(max(dot(reflect(-lightDir, norm), viewDir), 0.0), 32);	//32 shinines value, more shinines means less scatter
	vec3 specular = spec * specularStrength * lightColor;
	vec3 lighting = (ambient + diffuse + specular) * objectColor;
    
	FragColor = vec4(lighting, 1.0);
} 